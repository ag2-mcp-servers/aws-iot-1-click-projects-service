# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T12:03:55+00:00

from __future__ import annotations

from datetime import datetime
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field, RootModel, conint, constr


class AssociateDeviceWithPlacementResponse(BaseModel):
    pass


class AttributeDefaultValue(RootModel[constr(max_length=800)]):
    root: constr(max_length=800)


class AttributeName(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class AttributeValue(RootModel[constr(max_length=800)]):
    root: constr(max_length=800)


class CreatePlacementResponse(BaseModel):
    pass


class CreateProjectResponse(BaseModel):
    pass


class DefaultPlacementAttributeMap(
    RootModel[Optional[Dict[str, AttributeDefaultValue]]]
):
    root: Optional[Dict[str, AttributeDefaultValue]] = None


class DeletePlacementRequest(BaseModel):
    pass


class DeletePlacementResponse(BaseModel):
    pass


class DeleteProjectRequest(BaseModel):
    pass


class DeleteProjectResponse(BaseModel):
    pass


class DescribePlacementRequest(BaseModel):
    pass


class DescribeProjectRequest(BaseModel):
    pass


class Description(RootModel[constr(min_length=0, max_length=500)]):
    root: constr(min_length=0, max_length=500)


class DeviceCallbackKey(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class DeviceCallbackValue(RootModel[constr(max_length=200)]):
    root: constr(max_length=200)


class DeviceId(RootModel[constr(min_length=1, max_length=32)]):
    root: constr(min_length=1, max_length=32)


class DeviceMap(RootModel[Optional[Dict[str, DeviceId]]]):
    root: Optional[Dict[str, DeviceId]] = None


class DeviceTemplateName(
    RootModel[constr(pattern=r'^[a-zA-Z0-9_-]+$', min_length=1, max_length=128)]
):
    root: constr(pattern=r'^[a-zA-Z0-9_-]+$', min_length=1, max_length=128)


class DeviceType(RootModel[constr(max_length=128)]):
    root: constr(max_length=128)


class DisassociateDeviceFromPlacementRequest(BaseModel):
    pass


class DisassociateDeviceFromPlacementResponse(BaseModel):
    pass


class GetDevicesInPlacementRequest(BaseModel):
    pass


class GetDevicesInPlacementResponse(BaseModel):
    devices: DeviceMap


class InternalFailureException(RootModel[Any]):
    root: Any


class InvalidRequestException(RootModel[Any]):
    root: Any


class ListPlacementsRequest(BaseModel):
    pass


class ListProjectsRequest(BaseModel):
    pass


class ListTagsForResourceRequest(BaseModel):
    pass


class MaxResults(RootModel[conint(ge=1, le=250)]):
    root: conint(ge=1, le=250)


class NextToken(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class PlacementAttributeMap(RootModel[Optional[Dict[str, AttributeValue]]]):
    root: Optional[Dict[str, AttributeValue]] = None


class PlacementName(
    RootModel[constr(pattern=r'^[a-zA-Z0-9_-]+$', min_length=1, max_length=128)]
):
    root: constr(pattern=r'^[a-zA-Z0-9_-]+$', min_length=1, max_length=128)


class ProjectArn(
    RootModel[
        constr(
            pattern=r'^arn:aws:iot1click:[A-Za-z0-9_/.-]{0,63}:\d+:projects/[0-9A-Za-z_-]{1,128}$'
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws:iot1click:[A-Za-z0-9_/.-]{0,63}:\d+:projects/[0-9A-Za-z_-]{1,128}$'
    )


class ProjectName(
    RootModel[constr(pattern=r'^[0-9A-Za-z_-]+$', min_length=1, max_length=128)]
):
    root: constr(pattern=r'^[0-9A-Za-z_-]+$', min_length=1, max_length=128)


class ResourceConflictException(RootModel[Any]):
    root: Any


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class TagKey(
    RootModel[
        constr(pattern=r'^(?!aws:)[a-zA-Z+-=._:/]+$', min_length=1, max_length=128)
    ]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(pattern=r'^(?!aws:)[a-zA-Z+-=._:/]+$', min_length=1, max_length=128)


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=50, min_length=1)


class TagResourceResponse(BaseModel):
    pass


class TagValue(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class Time(RootModel[datetime]):
    root: datetime


class TooManyRequestsException(RootModel[Any]):
    root: Any


class UntagResourceRequest(BaseModel):
    pass


class UntagResourceResponse(BaseModel):
    pass


class UpdatePlacementRequest(BaseModel):
    attributes: Optional[PlacementAttributeMap] = None


class UpdatePlacementResponse(BaseModel):
    pass


class UpdateProjectResponse(BaseModel):
    pass


class ProjectsProjectNamePlacementsPostRequest(BaseModel):
    attributes: Optional[Dict[str, AttributeValue]] = Field(
        None,
        description='Optional user-defined key/value pairs providing contextual data (such as location or function) for the placement.',
    )
    placementName: constr(pattern=r'^[a-zA-Z0-9_-]+$', min_length=1, max_length=128) = (
        Field(..., description='The name of the placement to be created.')
    )


class ProjectsProjectNamePlacementsPlacementNamePutRequest(BaseModel):
    attributes: Optional[Dict[str, AttributeValue]] = Field(
        None,
        description='The user-defined object of attributes used to update the placement. The maximum number of key/value pairs is 50.',
    )


class ProjectsProjectNamePlacementsPlacementNameDevicesDeviceTemplateNamePutRequest(
    BaseModel
):
    deviceId: constr(min_length=1, max_length=32) = Field(
        ...,
        description='The ID of the physical device to be associated with the given placement in the project. Note that a mandatory 4 character prefix is required for all <code>deviceId</code> values.',
    )


class TagsResourceArnPostRequest(BaseModel):
    tags: Dict[str, TagValue] = Field(
        ...,
        description='The new or modifying tag(s) for the resource. See <a href="https://docs.aws.amazon.com/iot-1-click/latest/developerguide/1click-appendix.html#1click-limits">AWS IoT 1-Click Service Limits</a> for the maximum number of tags allowed per resource.',
    )


class TagKeys(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=50, min_length=1)


class AssociateDeviceWithPlacementRequest(BaseModel):
    deviceId: DeviceId


class CreatePlacementRequest(BaseModel):
    attributes: Optional[PlacementAttributeMap] = None
    placementName: PlacementName


class DeviceCallbackOverrideMap(RootModel[Optional[Dict[str, DeviceCallbackValue]]]):
    root: Optional[Dict[str, DeviceCallbackValue]] = None


class DeviceTemplate(BaseModel):
    callbackOverrides: Optional[DeviceCallbackOverrideMap] = None
    deviceType: Optional[DeviceType] = None


class DeviceTemplateMap(RootModel[Optional[Dict[str, DeviceTemplate]]]):
    root: Optional[Dict[str, DeviceTemplate]] = None


class PlacementDescription(BaseModel):
    attributes: PlacementAttributeMap
    createdDate: Time
    placementName: PlacementName
    projectName: ProjectName
    updatedDate: Time


class PlacementSummary(BaseModel):
    createdDate: Time
    placementName: PlacementName
    projectName: ProjectName
    updatedDate: Time


class PlacementSummaryList(RootModel[List[PlacementSummary]]):
    root: List[PlacementSummary]


class PlacementTemplate(BaseModel):
    defaultAttributes: Optional[DefaultPlacementAttributeMap] = None
    deviceTemplates: Optional[DeviceTemplateMap] = None


class TagMap(RootModel[Optional[Dict[str, TagValue]]]):
    root: Optional[Dict[str, TagValue]] = None


class TagResourceRequest(BaseModel):
    tags: TagMap


class UpdateProjectRequest(BaseModel):
    description: Optional[Description] = None
    placementTemplate: Optional[PlacementTemplate] = None


class ProjectsPostRequest(BaseModel):
    description: Optional[constr(min_length=0, max_length=500)] = Field(
        None, description='An optional description for the project.'
    )
    placementTemplate: Optional[PlacementTemplate] = Field(
        None, description='An object defining the template for a placement.'
    )
    projectName: constr(pattern=r'^[0-9A-Za-z_-]+$', min_length=1, max_length=128) = (
        Field(..., description='The name of the project to create.')
    )
    tags: Optional[Dict[str, TagValue]] = Field(
        None,
        description='Optional tags (metadata key/value pairs) to be associated with the project. For example, <code>{ {"key1": "value1", "key2": "value2"} }</code>. For more information, see <a href="https://aws.amazon.com/answers/account-management/aws-tagging-strategies/">AWS Tagging Strategies</a>.',
    )


class ProjectsProjectNamePutRequest(BaseModel):
    description: Optional[constr(min_length=0, max_length=500)] = Field(
        None, description='An optional user-defined description for the project.'
    )
    placementTemplate: Optional[PlacementTemplate] = Field(
        None, description='An object defining the template for a placement.'
    )


class CreateProjectRequest(BaseModel):
    description: Optional[Description] = None
    placementTemplate: Optional[PlacementTemplate] = None
    projectName: ProjectName
    tags: Optional[TagMap] = None


class DescribePlacementResponse(BaseModel):
    placement: PlacementDescription


class ListPlacementsResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    placements: PlacementSummaryList


class ListTagsForResourceResponse(BaseModel):
    tags: Optional[TagMap] = None


class ProjectDescription(BaseModel):
    arn: Optional[ProjectArn] = None
    createdDate: Time
    description: Optional[Description] = None
    placementTemplate: Optional[PlacementTemplate] = None
    projectName: ProjectName
    tags: Optional[TagMap] = None
    updatedDate: Time


class ProjectSummary(BaseModel):
    arn: Optional[ProjectArn] = None
    createdDate: Time
    projectName: ProjectName
    tags: Optional[TagMap] = None
    updatedDate: Time


class ProjectSummaryList(RootModel[List[ProjectSummary]]):
    root: List[ProjectSummary]


class DescribeProjectResponse(BaseModel):
    project: ProjectDescription


class ListProjectsResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    projects: ProjectSummaryList
