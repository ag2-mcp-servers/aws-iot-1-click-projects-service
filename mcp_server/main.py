# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T12:03:55+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from fastapi import Header, Path, Query
from pydantic import conint, constr

from models import (
    AssociateDeviceWithPlacementResponse,
    CreatePlacementResponse,
    CreateProjectResponse,
    DeletePlacementResponse,
    DeleteProjectResponse,
    DescribePlacementResponse,
    DescribeProjectResponse,
    DisassociateDeviceFromPlacementResponse,
    GetDevicesInPlacementResponse,
    InternalFailureException,
    InvalidRequestException,
    ListPlacementsResponse,
    ListProjectsResponse,
    ListTagsForResourceResponse,
    ProjectsPostRequest,
    ProjectsProjectNamePlacementsPlacementNameDevicesDeviceTemplateNamePutRequest,
    ProjectsProjectNamePlacementsPlacementNamePutRequest,
    ProjectsProjectNamePlacementsPostRequest,
    ProjectsProjectNamePutRequest,
    ResourceConflictException,
    ResourceNotFoundException,
    TagKeys,
    TagResourceResponse,
    TagsResourceArnPostRequest,
    TooManyRequestsException,
    UntagResourceResponse,
    UpdatePlacementResponse,
    UpdateProjectResponse,
)

app = MCPProxy(
    contact={
        'email': 'mike.ralphson@gmail.com',
        'name': 'Mike Ralphson',
        'url': 'https://github.com/mermade/aws2openapi',
        'x-twitter': 'PermittedSoc',
    },
    description='The AWS IoT 1-Click Projects API Reference',
    license={'name': 'Apache 2.0 License', 'url': 'http://www.apache.org/licenses/'},
    termsOfService='https://aws.amazon.com/service-terms/',
    title='AWS IoT 1-Click Projects Service',
    version='2018-05-14',
    servers=[
        {
            'description': 'The AWS IoT 1-Click Projects multi-region endpoint',
            'url': 'http://projects.iot1click.{region}.amazonaws.com',
            'variables': {
                'region': {
                    'default': 'us-east-1',
                    'description': 'The AWS region',
                    'enum': [
                        'us-east-1',
                        'us-east-2',
                        'us-west-1',
                        'us-west-2',
                        'us-gov-west-1',
                        'us-gov-east-1',
                        'ca-central-1',
                        'eu-north-1',
                        'eu-west-1',
                        'eu-west-2',
                        'eu-west-3',
                        'eu-central-1',
                        'eu-south-1',
                        'af-south-1',
                        'ap-northeast-1',
                        'ap-northeast-2',
                        'ap-northeast-3',
                        'ap-southeast-1',
                        'ap-southeast-2',
                        'ap-east-1',
                        'ap-south-1',
                        'sa-east-1',
                        'me-south-1',
                    ],
                }
            },
        },
        {
            'description': 'The AWS IoT 1-Click Projects multi-region endpoint',
            'url': 'https://projects.iot1click.{region}.amazonaws.com',
            'variables': {
                'region': {
                    'default': 'us-east-1',
                    'description': 'The AWS region',
                    'enum': [
                        'us-east-1',
                        'us-east-2',
                        'us-west-1',
                        'us-west-2',
                        'us-gov-west-1',
                        'us-gov-east-1',
                        'ca-central-1',
                        'eu-north-1',
                        'eu-west-1',
                        'eu-west-2',
                        'eu-west-3',
                        'eu-central-1',
                        'eu-south-1',
                        'af-south-1',
                        'ap-northeast-1',
                        'ap-northeast-2',
                        'ap-northeast-3',
                        'ap-southeast-1',
                        'ap-southeast-2',
                        'ap-east-1',
                        'ap-south-1',
                        'sa-east-1',
                        'me-south-1',
                    ],
                }
            },
        },
        {
            'description': 'The AWS IoT 1-Click Projects endpoint for China (Beijing) and China (Ningxia)',
            'url': 'http://projects.iot1click.{region}.amazonaws.com.cn',
            'variables': {
                'region': {
                    'default': 'cn-north-1',
                    'description': 'The AWS region',
                    'enum': ['cn-north-1', 'cn-northwest-1'],
                }
            },
        },
        {
            'description': 'The AWS IoT 1-Click Projects endpoint for China (Beijing) and China (Ningxia)',
            'url': 'https://projects.iot1click.{region}.amazonaws.com.cn',
            'variables': {
                'region': {
                    'default': 'cn-north-1',
                    'description': 'The AWS region',
                    'enum': ['cn-north-1', 'cn-northwest-1'],
                }
            },
        },
    ],
)


@app.get(
    '/projects',
    description=""" Lists the AWS IoT 1-Click project(s) associated with your AWS account and region. """,
    tags=['project_management', 'placement_handling'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_projects(
    next_token: Optional[constr(min_length=1, max_length=1024)] = Query(
        None, alias='nextToken'
    ),
    max_results: Optional[conint(ge=1, le=250)] = Query(None, alias='maxResults'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/projects',
    description=""" Creates an empty project with a placement template. A project contains zero or more placements that adhere to the placement template defined in the project. """,
    tags=['project_management', 'placement_handling'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_project(
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: ProjectsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/projects/{projectName}',
    description=""" <p>Deletes a project. To delete a project, it must not have any placements associated with it.</p> <note> <p>When you delete a project, all associated data becomes irretrievable.</p> </note> """,
    tags=['project_management', 'placement_handling'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_project(
    project_name: constr(
        pattern=r'^[0-9A-Za-z_-]+$', min_length=1, max_length=128
    ) = Path(..., alias='projectName'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/projects/{projectName}',
    description=""" Returns an object describing a project. """,
    tags=['project_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_project(
    project_name: constr(
        pattern=r'^[0-9A-Za-z_-]+$', min_length=1, max_length=128
    ) = Path(..., alias='projectName'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/projects/{projectName}',
    description=""" Updates a project associated with your AWS account and region. With the exception of device template names, you can pass just the values that need to be updated because the update request will change only the values that are provided. To clear a value, pass the empty string (i.e., <code>""</code>). """,
    tags=['project_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_project(
    project_name: constr(
        pattern=r'^[0-9A-Za-z_-]+$', min_length=1, max_length=128
    ) = Path(..., alias='projectName'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: ProjectsProjectNamePutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/projects/{projectName}/placements',
    description=""" Lists the placement(s) of a project. """,
    tags=['project_management', 'placement_handling'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_placements(
    project_name: constr(
        pattern=r'^[0-9A-Za-z_-]+$', min_length=1, max_length=128
    ) = Path(..., alias='projectName'),
    next_token: Optional[constr(min_length=1, max_length=1024)] = Query(
        None, alias='nextToken'
    ),
    max_results: Optional[conint(ge=1, le=250)] = Query(None, alias='maxResults'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/projects/{projectName}/placements',
    description=""" Creates an empty placement. """,
    tags=['project_management', 'placement_handling'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_placement(
    project_name: constr(
        pattern=r'^[0-9A-Za-z_-]+$', min_length=1, max_length=128
    ) = Path(..., alias='projectName'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: ProjectsProjectNamePlacementsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/projects/{projectName}/placements/{placementName}',
    description=""" <p>Deletes a placement. To delete a placement, it must not have any devices associated with it.</p> <note> <p>When you delete a placement, all associated data becomes irretrievable.</p> </note> """,
    tags=['project_management', 'placement_handling'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_placement(
    placement_name: constr(
        pattern=r'^[a-zA-Z0-9_-]+$', min_length=1, max_length=128
    ) = Path(..., alias='placementName'),
    project_name: constr(
        pattern=r'^[0-9A-Za-z_-]+$', min_length=1, max_length=128
    ) = Path(..., alias='projectName'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/projects/{projectName}/placements/{placementName}',
    description=""" Describes a placement in a project. """,
    tags=['project_management', 'placement_handling'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_placement(
    placement_name: constr(
        pattern=r'^[a-zA-Z0-9_-]+$', min_length=1, max_length=128
    ) = Path(..., alias='placementName'),
    project_name: constr(
        pattern=r'^[0-9A-Za-z_-]+$', min_length=1, max_length=128
    ) = Path(..., alias='projectName'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/projects/{projectName}/placements/{placementName}',
    description=""" Updates a placement with the given attributes. To clear an attribute, pass an empty value (i.e., ""). """,
    tags=['project_management', 'placement_handling'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_placement(
    placement_name: constr(
        pattern=r'^[a-zA-Z0-9_-]+$', min_length=1, max_length=128
    ) = Path(..., alias='placementName'),
    project_name: constr(
        pattern=r'^[0-9A-Za-z_-]+$', min_length=1, max_length=128
    ) = Path(..., alias='projectName'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: ProjectsProjectNamePlacementsPlacementNamePutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/projects/{projectName}/placements/{placementName}/devices',
    description=""" Returns an object enumerating the devices in a placement. """,
    tags=['project_management', 'placement_handling'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_devices_in_placement(
    project_name: constr(
        pattern=r'^[0-9A-Za-z_-]+$', min_length=1, max_length=128
    ) = Path(..., alias='projectName'),
    placement_name: constr(
        pattern=r'^[a-zA-Z0-9_-]+$', min_length=1, max_length=128
    ) = Path(..., alias='placementName'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/projects/{projectName}/placements/{placementName}/devices/{deviceTemplateName}',
    description=""" Removes a physical device from a placement. """,
    tags=['project_management', 'placement_handling', 'device_association_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def disassociate_device_from_placement(
    project_name: constr(
        pattern=r'^[0-9A-Za-z_-]+$', min_length=1, max_length=128
    ) = Path(..., alias='projectName'),
    placement_name: constr(
        pattern=r'^[a-zA-Z0-9_-]+$', min_length=1, max_length=128
    ) = Path(..., alias='placementName'),
    device_template_name: constr(
        pattern=r'^[a-zA-Z0-9_-]+$', min_length=1, max_length=128
    ) = Path(..., alias='deviceTemplateName'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/projects/{projectName}/placements/{placementName}/devices/{deviceTemplateName}',
    description=""" Associates a physical device with a placement. """,
    tags=['project_management', 'placement_handling', 'device_association_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def associate_device_with_placement(
    project_name: constr(
        pattern=r'^[0-9A-Za-z_-]+$', min_length=1, max_length=128
    ) = Path(..., alias='projectName'),
    placement_name: constr(
        pattern=r'^[a-zA-Z0-9_-]+$', min_length=1, max_length=128
    ) = Path(..., alias='placementName'),
    device_template_name: constr(
        pattern=r'^[a-zA-Z0-9_-]+$', min_length=1, max_length=128
    ) = Path(..., alias='deviceTemplateName'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: ProjectsProjectNamePlacementsPlacementNameDevicesDeviceTemplateNamePutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/tags/{resourceArn}',
    description=""" Lists the tags (metadata key/value pairs) which you have assigned to the resource. """,
    tags=['project_management', 'placement_handling', 'resource_tagging_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_tags_for_resource(
    resource_arn: constr(
        pattern=r'^arn:aws:iot1click:[A-Za-z0-9_/.-]{0,63}:\d+:projects/[0-9A-Za-z_-]{1,128}$'
    ) = Path(..., alias='resourceArn'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/tags/{resourceArn}',
    description=""" Creates or modifies tags for a resource. Tags are key/value pairs (metadata) that can be used to manage a resource. For more information, see <a href="https://aws.amazon.com/answers/account-management/aws-tagging-strategies/">AWS Tagging Strategies</a>. """,
    tags=['resource_tagging_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def tag_resource(
    resource_arn: constr(
        pattern=r'^arn:aws:iot1click:[A-Za-z0-9_/.-]{0,63}:\d+:projects/[0-9A-Za-z_-]{1,128}$'
    ) = Path(..., alias='resourceArn'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: TagsResourceArnPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/tags/{resourceArn}#tagKeys',
    description=""" Removes one or more tags (metadata key/value pairs) from a resource. """,
    tags=['resource_tagging_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def untag_resource(
    resource_arn: constr(
        pattern=r'^arn:aws:iot1click:[A-Za-z0-9_/.-]{0,63}:\d+:projects/[0-9A-Za-z_-]{1,128}$'
    ) = Path(..., alias='resourceArn'),
    tag_keys: TagKeys = Query(..., alias='tagKeys'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
